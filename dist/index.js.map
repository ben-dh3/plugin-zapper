{"version":3,"sources":["../src/actions/portfolio/portfolio.ts","../src/actions/portfolio/examples.ts","../src/utils.ts","../src/environment.ts","../src/actions/farcasterPortfolio/farcasterPortfolio.ts","../src/actions/farcasterPortfolio/examples.ts","../src/index.ts"],"sourcesContent":["import {\n    Content,\n    elizaLogger,\n    generateText,\n    ModelClass,\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport examples from \"./examples\";\nimport { formatPortfolioData, getZapperHeaders } from \"../../utils\";\nimport { validateZapperConfig } from \"../../environment\";\nexport const portfolioAction: Action = {\n    name: \"ZAPPER_PORTFOLIO\",\n    description: \"Get the portfolio from given address or addresses\",\n    similes: [\"GET_PORTFOLIO\"],\n    examples: examples,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        _runtime: IAgentRuntime,\n        _message: Memory,\n        _state: State,\n        _options: { [key: string]: unknown },\n        _callback: HandlerCallback\n    ): Promise<boolean> => {\n        async function getZapperAssets(addresses: string[]) {\n            const query = `\n                query Portfolio($addresses: [Address!]!) {\n                    portfolio(addresses: $addresses) {\n                        tokenBalances {\n                            address\n                            network\n                            token {\n                                balance\n                                balanceUSD\n                                baseToken {\n                                    name\n                                    symbol\n                                }\n                            }\n                        }\n                        nftBalances {\n                            network\n                            balanceUSD\n                        }\n                        totals {\n                            total\n                            totalWithNFT\n                            totalByNetwork {\n                                network\n                                total\n                            }\n                            holdings {\n                                label\n                                balanceUSD\n                                pct\n                            }\n                        }\n                    }\n                }\n            `;\n            const config = await validateZapperConfig(_runtime);\n            const headers = getZapperHeaders(config)\n            const response = await fetch('https://public.zapper.xyz/graphql', {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({\n                    query,\n                    variables: {\n                        addresses: addresses\n                    }\n                })\n            });\n\n            const data = await response.json();\n            \n            if (data.errors) {\n                elizaLogger.error({ errors: data.errors }, \"Zapper API returned errors\");\n                throw new Error(\"Failed to fetch data from Zapper API\");\n            }\n\n            try {\n                const formattedResponse = formatPortfolioData(data);\n                return formattedResponse;\n            } catch (error) {\n                elizaLogger.error({ error }, \"Error formatting portfolio data\");\n                throw error;\n            }\n        }\n\n        try {\n            const context = `Extract only the blockchain wallet addresses from this text, returning them as a comma-separated list with no other text or explanations. The message is:\n            ${_message.content.text}`;\n\n            const extractedAddressesText = await generateText({\n                runtime: _runtime,\n                context,\n                modelClass: ModelClass.SMALL,\n                stop: [\"\\n\"]\n            });\n\n            const addresses = extractedAddressesText\n                .split(',')\n                .map(addr => addr.trim())\n                .filter(addr => addr.length > 0);\n\n            elizaLogger.info({ addresses }, \"Extracted addresses\");\n\n            if (addresses.length === 0) {\n                throw new Error(\"No wallet addresses found in the message\");\n            }\n\n            const assetsInfo = await getZapperAssets(addresses);\n\n            const responseText = `⚡ Here is the portfolio for the provided addresses:\n\\n${assetsInfo}`;\n\n            const newMemory: Memory = {\n                userId: _message.userId,\n                agentId: _message.agentId,\n                roomId: _message.roomId,\n                content: {\n                    text: responseText,\n                    action: \"ZAPPER_PORTFOLIO_RESPONSE\",\n                    source: _message.content?.source,\n                } as Content,\n            };\n\n            await _runtime.messageManager.createMemory(newMemory);\n            _callback(newMemory.content);\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in portfolioAction:\", error);\n            throw error;\n        }\n    },\n};\n","export default [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me the holdings for 0x187c7b0393ebe86378128f2653d0930e33218899\",\n            },\n        },\n        {\n            user: \"{{user2}}\",\n            content: { text: \"\", action: \"ZAPPER_PORTFOLIO\" },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Check these wallets: 0xd8da6bf26964af9d7eed9e03e53415d37aa96045, 0xadd746be46ff36f10c81d6e3ba282537f4c68077\",\n            },\n        },\n        {\n            user: \"{{user2}}\",\n            content: { text: \"\", action: \"ZAPPER_PORTFOLIO\" },\n        },\n    ],\n];","import { ZapperPortfolioResponse, ZapperFarcasterResponse } from \"./types\";\nimport { ZapperConfig } from './environment';\n\nexport function getZapperHeaders(config: ZapperConfig) {\n    const encodedKey = btoa(config.ZAPPER_API_KEY);\n    return {\n        'Content-Type': 'application/json',\n        'Authorization': `Basic ${encodedKey}`\n    }   \n}\n\nexport const formatPortfolioData = (data: ZapperPortfolioResponse) => {\n    const portfolio = data.data.portfolio;\n    // Format top five token holdings\n    const tokenSection = portfolio.tokenBalances\n        .sort((a, b) => b.token.balanceUSD - a.token.balanceUSD)\n        .slice(0, 5)\n        .map(balance => {\n            const formattedBalance = Number(balance.token.balance).toLocaleString(undefined, {\n                maximumFractionDigits: 4\n            });\n            const formattedUSD = balance.token.balanceUSD.toLocaleString(undefined, {\n                style: 'currency',\n                currency: 'USD'\n            });\n            return `${balance.token.baseToken.name} (${balance.token.baseToken.symbol})\nNetwork: ${balance.network}\nBalance: ${formattedBalance}\nValue: ${formattedUSD}`;\n        }).join(\"\\n\");\n    // Format NFT holdings\n    const nftSection = portfolio.nftBalances\n        .map(nft => {\n            const formattedUSD = nft.balanceUSD.toLocaleString(undefined, {\n                style: 'currency',\n                currency: 'USD'\n            });\n            return `${nft.network}\nNFT Value: ${formattedUSD}`;\n        }).join(\"\\n\");\n    // Calculate totals\n    const totalUSD = portfolio.totals.total.toLocaleString(undefined, {\n        style: 'currency',\n        currency: 'USD'\n    });\n    const totalWithNFTUSD = portfolio.totals.totalWithNFT.toLocaleString(undefined, {\n        style: 'currency',\n        currency: 'USD'\n    });\n    // Format network totals breakdown\n    const networkTotals = portfolio.totals.totalByNetwork\n        .filter(net => net.total > 0)\n        .sort((a, b) => b.total - a.total)\n        .map(net => {\n            const formattedUSD = net.total.toLocaleString(undefined, {\n                style: 'currency',\n                currency: 'USD'\n            });\n            return `${net.network}: ${formattedUSD}`;\n        }).join(\"\\n\");\n\n        return `💰 Portfolio Summary:\nTotal Value (excluding NFTs): ${totalUSD}\nTotal Value (including NFTs): ${totalWithNFTUSD}\n        \n🌐 Network Breakdown:\n${networkTotals}\n        \n🪙 Top Token Holdings:\n${tokenSection}\n        \n🎨 NFT Holdings:\n${nftSection}`;\n}\n\nexport const formatFarcasterData = (data: ZapperFarcasterResponse) => {\n    const profile = data.data?.farcasterProfile;\n    const allAddresses = [\n        ...(profile?.connectedAddresses || []),\n        profile?.custodyAddress\n    ].filter(Boolean);\n\n    return { addresses: allAddresses };\n};","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const zapperEnvironmentSchema = z.object({\n    ZAPPER_API_KEY: z.string().min(1, \"ZAPPER_API_KEY is required\"),\n});\n\nexport type ZapperConfig = z.infer<typeof zapperEnvironmentSchema>;\n\nexport async function validateZapperConfig(runtime: IAgentRuntime): Promise<ZapperConfig> {\n    try {\n        const config = {\n            ZAPPER_API_KEY: runtime.getSetting(\"ZAPPER_API_KEY\") || process.env.ZAPPER_API_KEY,\n        };\n\n        return zapperEnvironmentSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessage = error.errors.map((e) => e.message).join(\"\\n\");\n            throw new Error(`Zapper Configuration Error:\\n${errorMessage}`);\n        }\n        throw error;\n    }\n}","import {\n    Content,\n    elizaLogger,\n    generateText,\n    ModelClass,\n    type Action,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\nimport examples from \"./examples\";\nimport { formatFarcasterData, getZapperHeaders } from \"../../utils\";\nimport { validateZapperConfig } from \"../../environment\";\n\nexport const farcasterPortfolioAction: Action = {\n    name: \"FARCASTER_PORTFOLIO\",\n    description: \"Get the portfolio for one or more Farcaster usernames\",\n    similes: [\"GET_FARCASTER_PORTFOLIO\"],\n    examples: examples,\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        return true;\n    },\n    handler: async (\n        _runtime: IAgentRuntime,\n        _message: Memory,\n        _state: State,\n        _options: { [key: string]: unknown },\n        _callback: HandlerCallback\n    ): Promise<boolean> => {\n        async function getFarcasterAddresses(username: string): Promise<{\n            addresses: string[],\n        }> {\n            const query = `\n                query GetFarcasterAddresses($username: String!) {\n                    farcasterProfile(username: $username) {\n                        username\n                        fid\n                        metadata {\n                            displayName\n                            description\n                            imageUrl\n                            warpcast\n                        }\n                        connectedAddresses\n                        custodyAddress\n                    }\n                }\n            `;\n            const config = await validateZapperConfig(_runtime);\n            const headers = getZapperHeaders(config)\n            const response = await fetch('https://public.zapper.xyz/graphql', {\n                method: 'POST',\n                headers: headers,\n                body: JSON.stringify({\n                    query,\n                    variables: {\n                        username: username\n                    }\n                })\n            });\n\n            const data = await response.json();\n            \n            if (data.errors) {\n                elizaLogger.error({ errors: data.errors }, \"Zapper API returned errors\");\n                throw new Error(\"Failed to fetch Farcaster addresses\");\n            }\n\n            try {\n                const formattedResponse = formatFarcasterData(data);\n                return formattedResponse;\n            } catch (error) {\n                elizaLogger.error({ error }, \"Error formatting portfolio data\");\n                throw error;\n            }\n        }\n\n        try {\n            const context = `Extract the Farcaster username from this text, returning it as a string with no @ symbols or other text. The message is:\n            ${_message.content.text}`;\n\n            const usernameText = await generateText({\n                runtime: _runtime,\n                context,\n                modelClass: ModelClass.SMALL,\n                stop: [\"\\n\"]\n            });\n\n            const username = usernameText\n\n            elizaLogger.info({ username }, \"Extracted Farcaster username\");\n\n            const { addresses } = await getFarcasterAddresses(username);\n            \n            if (addresses.length === 0) {\n                throw new Error(\"No addresses found for these Farcaster accounts\");\n            }\n\n            const newMemory: Memory = {\n                userId: _message.userId,\n                agentId: _message.agentId,\n                roomId: _message.roomId,\n                content: {\n                    text: `Fetching portfolio for addresses: ${addresses.join(', ')}`,\n                    action: \"ZAPPER_PORTFOLIO\",\n                    source: _message.content?.source,\n                    addresses: addresses,\n                } as Content,\n            };\n            \n            await _runtime.messageManager.createMemory(newMemory);\n            _callback(newMemory.content);\n            // Run the portfolio action with addresses found in Farcaster profiles\n            await _runtime.processActions(newMemory, [newMemory], _state, _callback);\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error in farcasterPortfolio:\", error);\n            throw error;\n        }\n    },\n};","export default [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Show me the holdings for Farcaster users @vitalik.eth and @jessepollak\",\n            },\n        },\n        {\n            user: \"{{user2}}\",\n            content: { text: \"\", action: \"FARCASTER_PORTFOLIO\" },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the portfolio for @dwr.eth?\",\n            },\n        },\n        {\n            user: \"{{user2}}\",\n            content: { text: \"\", action: \"FARCASTER_PORTFOLIO\" },\n        },\n    ],\n];","import type { Plugin } from \"@elizaos/core\";\nimport { portfolioAction } from \"./actions/portfolio/portfolio\";\nimport { farcasterPortfolioAction } from \"./actions/farcasterPortfolio/farcasterPortfolio\";\n\nexport const zapperPlugin: Plugin = {\n    name: \"zapper\",\n    description: \"A plugin for integrating the Zapper API with your application.\",\n    actions: [portfolioAction, farcasterPortfolioAction],\n};\nexport default zapperPlugin;\n"],"mappings":"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","names":["elizaLogger","generateText","ModelClass","examples_default","examples_default","elizaLogger","generateText","ModelClass"]}